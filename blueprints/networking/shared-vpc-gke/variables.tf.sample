# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

variable "billing_account_id" {
  description = "Billing account id used as default for new projects."
  type        = string
}

variable "cluster_create" {
  description = "Create GKE cluster and nodepool."
  type        = bool
  default     = false
}

variable "deletion_protection" {
  description = "Prevent Terraform from destroying data storage resources (storage buckets, GKE clusters, CloudSQL instances) in this blueprint. When this field is set in Terraform state, a terraform destroy or terraform apply that would delete data storage resources will fail."
  type        = bool
  default     = false
  nullable    = false
}

variable "ip_ranges" {
  description = "Subnet IP CIDR ranges."
  type        = map(string)
  default = {
    gce = "10.0.16.0/24"
    gke = "10.0.32.0/24"
  }
}

variable "ip_secondary_ranges" {
  description = "Secondary IP CIDR ranges."
  type        = map(string)
  default = {
    gke-pods     = "10.128.0.0/18"
    gke-services = "172.16.0.0/24"
  }
}

variable "owners_gce" {
  description = "GCE project owners, in IAM format."
  type        = list(string)
  default     = []
}

variable "owners_gke" {
  description = "GKE project owners, in IAM format."
  type        = list(string)
  default     = []
}

variable "owners_host" {
  description = "Host project owners, in IAM format."
  type        = list(string)
  default     = []
}

variable "prefix" {
  description = "Prefix used for resource names."
  type        = string
  validation {
    condition     = var.prefix != ""
    error_message = "Prefix cannot be empty."
  }
}

variable "private_service_ranges" {
  description = "Private service IP CIDR ranges."
  type        = map(string)
  default = {
    cluster-1 = "192.168.0.0/28"
  }
}

variable "project_services" {
  description = "Service APIs enabled by default in new projects."
  type        = list(string)
  default = [
    "container.googleapis.com",
    "stackdriver.googleapis.com",
  ]
}

variable "region" {
  description = "Region used."
  type        = string
  default     = "europe-west1"
}

variable "root_node" {
  description = "Hierarchy node where projects will be created, 'organizations/org_id' or 'folders/folder_id'."
  type        = string
}


#Own code
variable "folder_display_name" {
  type        = string
  description = "The display name of the folder."
}

variable "secondary_range_names" {
  description = "Names of the secondary IP ranges."
  type = map(string)
  default = {
    pods     = "pods"
    services = "services"
  }
}

# variable "nbss_main_folder_id" {
#   description = "The resource ID of the nbss-main folder"
#   type        = string
# }

# variable "pods_range_name" {
#   description = "Name for the pods range"
#   type        = string
#   default     = "pods" # You can set a default value or omit this line
# }

# variable "services_range_name" {
#   description = "Name for the services range"
#   type        = string
#   default     = "services" # You can set a default value or omit this line
# }

# Selected variables from gke-cluster-standard/variables.tf
variable "cluster_autoscaling" {
  description = "Enable and configure limits for Node Auto-Provisioning with Cluster Autoscaler."
  type = object({
    autoscaling_profile        = string
    auto_provisioning_defaults = object({
      boot_disk_kms_key         = string
      disk_size                 = number
      disk_type                 = string
      image_type                = string
      oauth_scopes              = list(string)
      service_account           = string
      shielded_instance_config  = object({
        enable_secure_boot      = bool
      })
    })
  })
  default = null
}

variable "enable_addons" {
  description = "Addons enabled in the cluster."
  type = object({
    http_load_balancing = bool
    horizontal_pod_autoscaling = bool
  })
  default = {
    http_load_balancing = true
    horizontal_pod_autoscaling = true
  }
}

variable "location" {
  description = "Cluster zone or region."
  type        = string
}

variable "name" {
  description = "Cluster name."
  type        = string
}

variable "private_cluster_config" {
  description = "Private cluster configuration."
  type = object({
    enable_private_endpoint = bool
    master_ipv4_cidr_block  = string
  })
  default = null
}

variable "vpc_config" {
  description = "VPC-level configuration."
  type = object({
    network                = string
    subnetwork             = string
    secondary_range_blocks = map(string)
  })
  nullable = false
}

# Selected variables from gke-nodepool/variables.tf
variable "cluster_id" {
  description = "Cluster id, recommended to prevent misconfiguration."
  type        = string
  default     = null
}

variable "gke_version" {
  description = "Kubernetes nodes version."
  type        = string
  default     = null
}

variable "max_pods_per_node" {
  description = "Maximum number of pods per node."
  type        = number
  default     = null
}

variable "node_count" {
  description = "Number of nodes per instance group."
  type = object({
    current = number
    initial = number
  })
  default = {
    initial = 1
  }
}

variable "taints" {
  description = "Kubernetes taints applied to all nodes."
  type = map(object({
    value  = string
    effect = string
  }))
  default = {}
}

variable "nodepool_config" {
  description = "Nodepool-level configuration."
  type = object({
    autoscaling = optional(object({
      location_policy = optional(string)
      max_node_count  = optional(number)
      min_node_count  = optional(number)
      use_total_nodes = optional(bool, false)
    }))
    management = optional(object({
      auto_repair  = optional(bool)
      auto_upgrade = optional(bool)
    }))
    # placement_policy = optional(bool)
    upgrade_settings = optional(object({
      max_surge       = number
      max_unavailable = number
    }))
  })
  default = null
}